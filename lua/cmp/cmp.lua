-- local M = {}
--
-- function M.setup()
--   local status_ok, cmp = pcall(require, 'cmp')
--   if not status_ok then return end
--
--   local capabilities = require 'cmp_nvim_lsp'.default_capabilities()
--   local lspconfig = require 'lspconfig'
--   local luasnip = require 'luasnip'
--
--   local servers = { 'tsserver', 'pyright', 'gopls', 'clangd' }
--   for _, lsp in ipairs(servers) do
--     lspconfig[lsp].setup {
--       capabilities = capabilities,
--     }
--   end
--
--   cmp.setup {
--     snippet = {
--       expand = function(args)
--         luasnip.lsp_expand(args.body)
--       end,
--     },
--     mapping = cmp.mapping.preset.insert({
--       ["<C-n>"] = cmp.mapping.select_next_item { behavior = cmp.SelectBehavior.Insert },
--       ["<C-p>"] = cmp.mapping.select_prev_item { behavior = cmp.SelectBehavior.Insert },
--       ["<C-d>"] = cmp.mapping.scroll_docs(-4),
--       ["<C-f>"] = cmp.mapping.scroll_docs(4),
--       ["<C-e>"] = cmp.mapping.abort(),
--       ["<c-y>"] = cmp.mapping(
--         cmp.mapping.confirm {
--           behavior = cmp.ConfirmBehavior.Insert,
--           select = true,
--         },
--         { "i", "c" }
--       ),
--       ["<M-y>"] = cmp.mapping(
--         cmp.mapping.confirm {
--           behavior = cmp.ConfirmBehavior.Replace,
--           select = false,
--         },
--         { "i", "c" }
--       ),
--
--       ["<c-space>"] = cmp.mapping {
--         i = cmp.mapping.complete(),
--         c = function(
--           _ --[[fallback]]
--         )
--           if cmp.visible() then
--             if not cmp.confirm { select = true } then
--               return
--             end
--           else
--             cmp.complete()
--           end
--         end,
--       },
--       ["<tab>"] = cmp.config.disable,
--       -- ['<Tab>'] = cmp.mapping(function(fallback)
--       --   if cmp.visible() then
--       --     cmp.select_next_item()
--       --   elseif luasnip.expand_or_jumpable() then
--       --     luasnip.expand_or_jump()
--       --   else
--       --     fallback()
--       --   end
--       -- end, { 'i', 's' }),
--       -- ['<S-Tab>'] = cmp.mapping(function(fallback)
--       --   if cmp.visible() then
--       --     cmp.select_prev_item()
--       --   elseif luasnip.jumpable(-1) then
--       --     luasnip.jump(-1)
--       --   else
--       --     fallback()
--       --   end
--       -- end, { 'i', 's' }),
--     }),
--     sources = {
--       { name = 'nvim_lsp', group_index = 1 },
--       { name = 'copilot',  group_index = 1 },
--       { name = 'luasnip',  group_index = 2 },
--     },
--     enabled = function()
--       -- disable completion in comments
--       local context = require 'cmp.config.context'
--       -- keep command mode completion enabled when cursor is in a comment
--       if vim.api.nvim_get_mode().mode == 'c' then
--         return true
--       else
--         return not context.in_treesitter_capture("comment")
--             and not context.in_syntax_group("Comment")
--       end
--     end
--   }
-- end
--
-- return M
